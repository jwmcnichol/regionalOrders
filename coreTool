import requests
import pandas as pd
import os

# 60010933	Heydieles III - Moon 13 - Duvolle Laboratories Factory
# 60010939	Heydieles IV - Moon 19 - Duvolle Laboratories Warehouse
# region_id = 10000002
page_number = 1
page_size = 1000
directory_path = 'C:/Users/jwmcn/Downloads/'
regions_dict = {
                'A-R00001': '11000001',
                'A-R00002': '11000002',
                'A-R00003': '11000003',
                'A821-A': '10000019',
                'ADR01': '12000001',
                'ADR02': '12000002',
                'ADR03': '12000003',
                'ADR04': '12000004',
                'ADR05': '12000005',
                'Aridia': '10000054',
                'B-R00004': '11000004',
                'B-R00005': '11000005',
                'B-R00006': '11000006',
                'B-R00007': '11000007',
                'B-R00008': '11000008',
                'Black Rise': '10000069',
                'Branch': '10000055',
                'C-R00009': '11000009',
                'C-R00010': '11000010',
                'C-R00011': '11000011',
                'C-R00012': '11000012',
                'C-R00013': '11000013',
                'C-R00014': '11000014',
                'C-R00015': '11000015',
                'Cache': '10000007',
                'Catch': '10000014',
                'Cloud Ring': '10000051',
                'Cobalt Edge': '10000053',
                'Curse': '10000012',
                'D-R00016': '11000016',
                'D-R00017': '11000017',
                'D-R00018': '11000018',
                'D-R00019': '11000019',
                'D-R00020': '11000020',
                'D-R00021': '11000021',
                'D-R00022': '11000022',
                'D-R00023': '11000023',
                'Deklein': '10000035',
                'Delve': '10000060',
                'Derelik': '10000001',
                'Detorid': '10000005',
                'Devoid': '10000036',
                'Domain': '10000043',
                'E-R00024': '11000024',
                'E-R00025': '11000025',
                'E-R00026': '11000026',
                'E-R00027': '11000027',
                'E-R00028': '11000028',
                'E-R00029': '11000029',
                'Esoteria': '10000039',
                'Essence': '10000064',
                'Etherium Reach': '10000027',
                'Everyshore': '10000037',
                'F-R00030': '11000030',
                'Fade': '10000046',
                'Feythabolis': '10000056',
                'Fountain': '10000058',
                'G-R00031': '11000031',
                'Geminate': '10000029',
                'Genesis': '10000067',
                'Great Wildlands': '10000011',
                'H-R00032': '11000032',
                'Heimatar': '10000030',
                'Immensea': '10000025',
                'Impass': '10000031',
                'Insmother': '10000009',
                'J7HZ-F': '10000017',
                'K-R00033': '11000033',
                'Kador': '10000052',
                'Khanid': '10000049',
                'Kor-Azor': '10000065',
                'Lonetrek': '10000016',
                'Malpais': '10000013',
                'Metropolis': '10000042',
                'Molden Heath': '10000028',
                'No Name': '13000001',
                'Oasa': '10000040',
                'Omist': '10000062',
                'Outer Passage': '10000021',
                'Outer Ring': '10000057',
                'Paragon Soul': '10000059',
                'Period Basis': '10000063',
                'Perrigen Falls': '10000066',
                'Placid': '10000048',
                'Pochven': '10000070',
                'Providence': '10000047',
                'Pure Blind': '10000023',
                'Querious': '10000050',
                'Scalding Pass': '10000008',
                'Sinq Laison': '10000032',
                'Solitude': '10000044',
                'Stain': '10000022',
                'Syndicate': '10000041',
                'Tash-Murkon': '10000020',
                'Tenal': '10000045',
                'Tenerifis': '10000061',
                'The Bleak Lands': '10000038',
                'The Citadel': '10000033',
                'The Forge': '10000002',
                'The Kalevala Expanse': '10000034',
                'The Spire': '10000018',
                'Tribute': '10000010',
                'UUA-F4': '10000004',
                'Vale of the Silent': '10000003',
                'Venal': '10000015',
                'Verge Vendor': '10000068',
                'VR-01': '14000001',
                'VR-02': '14000002',
                'VR-03': '14000003',
                'VR-04': '14000004',
                'VR-05': '14000005',
                'Wicked Creek': '10000006'
                }


def main():
    region_picked = region_input()
    file_name = f"{region_picked[1]}Orders.csv"
    orders_data = get_region_orders2(region_picked[0])
    #if orders_data == 404:
    #    print("404 API - request bad")
    if region_picked == 2:
        print('faked')
    else:
        orders_df = pd.DataFrame(orders_data)
        write_json_to_csv(orders_df, directory_path, file_name)


def region_input():
    try:
        for key, value in regions_dict.items():
            print(f"{key}: {value}")
        region_choice = input("Enter name of region ")
        region_choice_value = regions_dict[region_choice]
        print(region_choice_value, " picked")
        return region_choice_value, region_choice
    except KeyError:
        print("Invalid region name, attention to details is important")
        return


def get_region_orders2(region_id):
    url = f"https://esi.evetech.net/latest/markets/{region_id}/orders/"
    print(url)
    params = {
        'page': page_number
    }
    response = requests.get(url, params=params)
    print(response)
    xpages = int(response.headers.get('x-pages')) + 1
    print(xpages)
    container_list = []
    for i in range(0, xpages):
        params = {
            'page': i
        }
        response = requests.get(url, params=params)
        if response.status_code == 200:
            response_json = response.json()
            for item in response_json:
                container_list.append(item)
    df_out = pd.DataFrame(container_list)
    return df_out


def get_region_orders(region_id):
    url = f"https://esi.evetech.net/latest/markets/{region_id}/orders/"
    print(url)
    response = requests.get(url)
    print(response.status_code)
    if response.status_code == 200:
        market_orders = response.json()
        for row in market_orders:
            print(row)
        print("return values to main")
        return market_orders
    else:
        print(f"Error: {response.status_code}")
        return 404


def write_json_to_csv(write_orders_df, write_directory_path, write_file_name):
    file_path = os.path.join(write_directory_path, write_file_name)
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
            print('deleted old file')
        except OSError as e:
            print(f"Error deleting {file_name}: {e}")
    csv_file_path = file_path
    write_orders_df.to_csv(csv_file_path, index=False)
    print("dataframe completed")
    print("dataframe parsed")
    print("wrote csv to disk as", csv_file_path)


main()
